"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ngeohash = require("ngeohash");
/**
 * Util namespace with several helper functions grouped in category classes
 */
var Util;
(function (Util) {
    /**
     * Geohash functions.
     */
    var Geohash = /** @class */ (function () {
        function Geohash() {
        }
        /**
     * Encodes a latitude-longitude point as a geohash with the given precision.
     * @param lat Latitude of point
     * @param lng Longitude of point
     * @param precision Charcter length of geohash *(defaults to 9)*
     */
        Geohash.encode = function (lat, lng, precision) {
            var prec = precision ? precision : 9;
            prec = Math.max(prec, 6);
            prec = Math.min(prec, 9);
            return ngeohash.encode(lat, lng, prec);
        };
        /**
         * Decode a given geohash as a latitude-longitude point.
         * @param geohash The geohash to decode
         */
        Geohash.decode = function (geohash) {
            return ngeohash.decode(geohash);
        };
        /**
         * Get bounds of geohash
         * @param geohash The geohash to decode to bounds
         */
        Geohash.bounds = function (geohash) {
            return ngeohash.decode_bbox(geohash);
        };
        /**
         * Is the given geohash (or its upperleftcorner) contained within the given coordinates
         * @param geohash
         * @param minlat
         * @param maxlat
         * @param minlng
         * @param maxlng
         */
        Geohash.isContained = function (geohash, minlat, maxlat, minlng, maxlng) {
            var loc = Util.Geohash.decode(geohash);
            return (minlat <= loc.latitude && loc.latitude <= maxlat)
                && (minlng <= loc.longitude && loc.longitude <= maxlng);
        };
        return Geohash;
    }());
    Util.Geohash = Geohash;
    /**
     * Time & data based functions.
     */
    var Time = /** @class */ (function () {
        function Time() {
        }
        /**
         * Returns the unix (UTC) timestamp for the given date parameters. The arguments are considered to be in UTC time.
         * @param {number} year Four digit number
         * @param {number} month The month in the year (1-12)
         * @param {number=} day  The day of the month (1-31)
         * @param {number=} hours The hour of the day (0-23)
         * @param {number=} minutes The minute of the day (0-59)
         * @param {number=} seconds The seconds of the day (0-59)
         * @param {number=} milliseconds The milliseconds of the day (0-999)
         */
        Time.timestamp = function (year, month, day, hours, minutes, seconds, milliseconds) {
            if (day === void 0) { day = 1; }
            if (hours === void 0) { hours = 0; }
            if (minutes === void 0) { minutes = 0; }
            if (seconds === void 0) { seconds = 0; }
            if (milliseconds === void 0) { milliseconds = 0; }
            return Date.UTC(year, month - 1, day, hours, minutes, seconds, milliseconds);
        };
        /**
         * Returns the string representation that can be used in the REST api urls.
         * (eg. 20171205 for December 5, 2017)
         * @param timestamp The UTC timestamp to convert
         */
        Time.getDayStr = function (timestamp) {
            var d = new Date(timestamp);
            var offset = d.getTimezoneOffset();
            d.setMinutes(d.getMinutes() - offset);
            var m = d.getUTCMonth() + 1;
            m = (m < 10) ? '0' + m : m;
            var dd = d.getUTCDate();
            dd = (dd < 10) ? '0' + dd : dd;
            return '' + d.getUTCFullYear() + m + dd;
        };
        /**
         * Returns the string representation that can be used in the REST api urls.
         * (eg. 20171205/13 for December 5, 2017 at 1pm)
         * @param timestamp The UTC timestamp to convert
         */
        Time.getHourStr = function (timestamp) {
            var d = new Date(timestamp);
            var h = d.getUTCHours();
            return this.getDayStr(timestamp) + '/' + h;
        };
        /**
         * Returns an array of 7 string arrays (mon-sun). Each array contains the UTC timestamps for each instance of that weekday in the month.
         * @param month The month (1-12)
         */
        Time.getWeekdaysTS = function (year, month) {
            //  Month not minus 1, since need to ask next month, but day 0
            var date = new Date(Date.UTC(year, month, 0));
            var days = date.getDate();
            var result = [];
            for (var i = 0; i < days; i++) {
                var wd = new Date(Date.UTC(year, month - 1, i + 1));
                var idx = (7 + wd.getUTCDay() - 1) % 7;
                if (idx in result) {
                    result[idx].push(wd.getTime());
                }
                else {
                    result[idx] = [wd.getTime()];
                }
            }
            return result;
        };
        return Time;
    }());
    Util.Time = Time;
})(Util = exports.Util || (exports.Util = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy90ZHVwb250L1dvcmtzcGFjZXMvY290LWxpYi9saWIvIiwic291cmNlcyI6WyJ1dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsbUNBQXFDO0FBRXJDOztHQUVHO0FBQ0gsSUFBaUIsSUFBSSxDQW1IcEI7QUFuSEQsV0FBaUIsSUFBSTtJQUNqQjs7T0FFRztJQUNIO1FBQUE7UUEyQ0EsQ0FBQztRQTFDRzs7Ozs7T0FLRDtRQUNRLGNBQU0sR0FBYixVQUFjLEdBQVcsRUFBRSxHQUFXLEVBQUUsU0FBa0I7WUFDdEQsSUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDekIsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDM0MsQ0FBQztRQUVEOzs7V0FHRztRQUNJLGNBQU0sR0FBYixVQUFjLE9BQWU7WUFDekIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEMsQ0FBQztRQUVEOzs7V0FHRztRQUNJLGNBQU0sR0FBYixVQUFjLE9BQWU7WUFDekIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDekMsQ0FBQztRQUVEOzs7Ozs7O1dBT0c7UUFDSSxtQkFBVyxHQUFsQixVQUFtQixPQUFlLEVBQUUsTUFBYyxFQUFFLE1BQWMsRUFBRSxNQUFjLEVBQUUsTUFBYztZQUM5RixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxP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