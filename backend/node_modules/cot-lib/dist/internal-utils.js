"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Rx_1 = require("rxjs/Rx");
;
var DEBUG = false;
var InternalUtils = /** @class */ (function () {
    function InternalUtils() {
    }
    // const regex = new RegExp('^http(?:s)?\:\/\/[^\/]+', 'g');
    InternalUtils.getDataType = function (link) {
        if (link.self.indexOf('/stats/unit/') > -1) {
            return 2 /* STATS_UNIT */;
        }
        else if (link.self.indexOf('/stats/batch/') > -1) {
            return 3 /* STATS_BATCH */;
        }
        else if (link.self.indexOf('/event') > -1) {
            return 1 /* BUCKET */;
        }
        else {
            //CatchAll
            return 1 /* BUCKET */;
        }
    };
    /**
     * Mapping function that takes a response and maps it to a *TemporalPage*.
     * @param response The response to map.
     * @param readUntil {number=} Until which timestamp we already read, so up untill (inclusive) that one, will be filtered out.
     * @throws Error when no link header is present.
     * @returns A *TemporalPage* object containing the **data** field and the **link** field.
     */
    InternalUtils.mapToTemporalPage = function (response, readUntil) {
        // new
        if (!response) {
            throw new Error('No Response present..');
        }
        // <-
        var link = this.parseLinkHeader(response.headers.link);
        var type = this.getDataType(link);
        if (response.headers.link) {
            // If 404 set type to NoData!
            if (response.status === 404) {
                type = 0 /* EMPTY */;
            }
            var data = void 0;
            switch (type) {
                case 0 /* EMPTY */:
                    data = { nodata: true };
                    // add possible status
                    data.status = response.status;
                    // add possible message
                    if (response.data) {
                        data.msg = response.data;
                    }
                    data = data;
                    break;
                case 2 /* STATS_UNIT */:
                case 3 /* STATS_BATCH */:
                    data = response.data;
                    var vol = data.values && data.values.length > 0;
                    Object.assign(data, { nodata: !vol });
                    if (!vol) {
                        Object.assign(data, { values: [] });
                    }
                    break;
                default:
                case 1 /* BUCKET */:
                    data = response.data;
                    // If there is actual data and we have a readUntil value
                    if (!!readUntil && data.values && data.values.length > 0) {
                        // If first value is not bigger than what we read, then filter from where we passed our readUntil point.
                        if (data.values[0][0] <= readUntil) {
                            // console.log('filtering all bigger than '+readUntil);
                            data.values = data.values.filter(function (record) { return record[0] > readUntil; });
                        }
                    }
                    var filled = data.values && data.values.length > 0;
                    Object.assign(data, { nodata: !filled });
                    if (!filled) {
                        Object.assign(data, { values: [] });
                    }
                    break;
            }
            return { data: data, link: link };
        }
        else {
            throw new Error('No link header present! (It should be there and at least contain a self link..)');
        }
    };
    /**
     * Parses the value of the link header, to make a *TemporalPageLink* object of the relevant information in there.
     * @param value The value of the link header to be parsed
     * @returns A *TemporalPageLink* object, containing at least a **self** link.
     */
    InternalUtils.parseLinkHeader = function (value) {
        var links = {};
        value.split(',').forEach(function (line) {
            var parts = line.split(';');
            var uri = parts[0].trim().slice(1, -1);
            var amount = parts.length;
            if (amount > 1) {
                for (var i = 1; i < amount; i++) {
                    var part = parts[i].split('=');
                    var key = part[0];
                    var value_1 = part[1];
                    if ('rel' === key.trim()) {
                        links[value_1.trim().slice(1, -1)] = uri;
                    }
                    else {
                        console.log(key.trim() + ' => ' + value_1.trim());
                    }
                }
            }
        });
        return links;
    };
    /**
     * Perform a GET request to the url and map the result to a TemporalPage object.
     * @param url {string} The FULL url to GET query
     * @param axiosInstance {AxiosInstance} Custom axios instance to perform
     * requests with, else the defaul axios.create() is used.
     * @param readUntil {number=} Until which timestamp we already read, so up untill (inclusive) that one, will be filtered out.
     */
    InternalUtils.getAsTemporalPage = function (url, axiosInstance, readUntil) {
        // let ax = axiosInstance || axios.create();
        return Rx_1.Observable.fromPromise(axiosInstance.get(url))
            .map(function (resp) { return InternalUtils.mapToTemporalPage(resp, readUntil); });
        // .catch(err => Observable.of(InternalUtils.mapToTemporalPage(err.response, readUntil)));
    };
    /**
     * Recursively follows links to get the complete interval as specified in the url
     *
     * @param host {string} The actual host endpoint as given to a Client instance
     * @param url {string} Url containing a *from* and *to* parameter
     * @param axiosInstance {AxiosInstance=} Optional custom axios instance to perform
     * requests with, else the defaul axios.create() is used.
     */
    InternalUtils.getCompleteInterval = function (host, url, axiosInstance) {
        var _this = this;
        if (url.indexOf('from=') < 0 || url.indexOf('to=') < 0) {
            throw new Error('The url should contain a from and to query parameter for this method to work.');
        }
        if (host.endsWith('/')) {
            host = host.substring(0, host.length - 1);
        }
        var last = '';
        return this.getAsTemporalPage(url, axiosInstance)
            .do(function (tpage) { return last = tpage.link['last']; })
            .expand(function (res) { return _this.expandTest(res, host, last, axiosInstance); });
    };
    /**
     * Returns the last timestamp that has been returned in the TemporalPage or null if there was no data.
     */
    InternalUtils.getLastTimestamp = function (tpage) {
        var bucket = tpage.data;
        var t = (bucket && bucket.values && bucket.values.length > 0) ? bucket.values[bucket.values.length - 1][0] : null;
        return t;
    };
    /**
     *
     * @param b1
     * @param b2
     */
    InternalUtils.mergeStatsBatchedData = function (b1, b2) {
        var bins = b1.bins;
        var values = [];
        for (var i = 0; i < bins; i++) {
            var row1 = b1.values[i];
            var row2 = b2.values[i];
            values.push(this.unifyStatsRecord(row1, row2));
        }
        return {
            nodata: false,
            columns: b1.columns,
            values: values,
            bins: bins
        };
    };
    /**
     * Merges 2 stat Data object.
     * @param d1 Data 1
     * @param d2 Data 2
     * @return A new Data containing the merged results
     */
    InternalUtils.mergeStatsData = function (d1, d2) {
        // Take first and only rows
        var row1 = d1.values[0];
        var row2 = d2.values[0];
        return {
            nodata: false,
            columns: d1.columns,
            values: [this.unifyStatsRecord(row1, row2)]
        };
    };
    /**
     * Merges two DataLayer Buckets.
     * @param b1 Bucket 1
     * @param b2 Bucket 2
     * @return A new DataLayer Bucket with merged data
     */
    InternalUtils.mergeDataLayerData = function (b1, b2) {
        var _this = this;
        var results = [];
        var handled = [];
        // all hashes from b1
        b1.values.forEach(function (row) {
            var idx = b2.values.findIndex(function (r) { return r[0 /* HASH */] === row[0 /* HASH */]; });
            results.push(_this.unifyDataLayerRecord(row, idx < 0 ? null : b2.values[idx]));
            handled.push(row[0 /* HASH */]);
        });
        // leftover hashes from b2
        b2.values
            .filter(function (row) { return handled.indexOf(row[0 /* HASH */]) < 0; }) // not yet handled
            .forEach(function (row) {
            var idx = b1.values.findIndex(function (r) { return r[0 /* HASH */] === row[0 /* HASH */]; });
            results.push(_this.unifyDataLayerRecord(row, idx < 0 ? null : b1.values[idx]));
        });
        return {
            nodata: false,
            name: b1.name,
            columns: b1.columns,
            values: results
        };
    };
    /**
     * Merge one stats record with one other record (record == row from Data.values)
     * @param r1 Record 1
     * @param r2 Record 2
     * @return A new record with merged data
     */
    InternalUtils.unifyStatsRecord = function (r1, r2) {
        var result = [];
        if (r1[0] == null) {
            result.push.apply(result, r2);
        }
        else if (r2[0] == null) {
            result.push.apply(result, r1);
        }
        else {
            var count1 = r1[4 /* COUNT */];
            var count2 = r2[4 /* COUNT */];
            // Mean
            result[0 /* MEAN */] = ((count1 * r1[0 /* MEAN */] + count2 * r2[0 /* MEAN */]) / (count1 + count2));
            // Min
            result[1 /* MIN */] = Math.min(r1[1 /* MIN */], r2[1 /* MIN */]);
            // Max
            result[2 /* MAX */] = Math.max(r1[2 /* MAX */], r2[2 /* MAX */]);
            // StdDev
            var std1 = r1[3 /* STDDEV */];
            var std2 = r2[3 /* STDDEV */];
            result[3 /* STDDEV */] = Math.sqrt((count1 * std1 * std1 + count2 * std2 * std2) / (count1 + count2));
            result[4 /* COUNT */] = count1 + count2;
        }
        return result;
    };
    /**
     * Merge one DataLayer record with one other record (record == row from Data.values)
     * @param r1 Record 1
     * @param r2 Record 2
     * @return A new record with merged data
     */
    InternalUtils.unifyDataLayerRecord = function (r1, r2) {
        var result = [];
        if (r1 == null || r1.length === 0) {
            result.push.apply(result, r2);
        }
        else if (r2 == null || r2.length === 0) {
            result.push.apply(result, r1);
        }
        else {
            result[0 /* HASH */] = r1[0 /* HASH */];
            var count1 = r1[5 /* COUNT */];
            var count2 = r2[5 /* COUNT */];
            // Mean
            result[1 /* MEAN */] = ((count1 * r1[1 /* MEAN */] + count2 * r2[1 /* MEAN */]) / (count1 + count2));
            // Min
            result[2 /* MIN */] = Math.min(r1[2 /* MIN */], r2[2 /* MIN */]);
            // Max
            result[3 /* MAX */] = Math.max(r1[3 /* MAX */], r2[3 /* MAX */]);
            // StdDev
            var std1 = r1[4 /* STDDEV */];
            var std2 = r2[4 /* STDDEV */];
            result[4 /* STDDEV */] = Math.sqrt((count1 * std1 * std1 + count2 * std2 * std2) / (count1 + count2));
            result[5 /* COUNT */] = count1 + count2;
        }
        return result;
    };
    /**
     * The test that picks how to expand the initial result of a query.
     * @param tpage TemporalPage incoming object
     * @param last The Link header *last* field
     * @param axiosInstance {AxiosInstance=} Optional custom axios instance to perform
     * requests with, else the defaul axios.create() is used.
     */
    InternalUtils.expandTest = function (tpage, host, last, axiosInstance) {
        if (!last) {
            if (DEBUG) {
                console.log('NO LAST: STOP');
            }
            // no last, stop expanding
            return Rx_1.Observable.empty();
        }
        // last: complete last link path + querystring if any
        // myLast: path with out querystring
        var myLast = last.indexOf('?') > -1 ? last.split('?')[0] : last;
        // lastTo: timestamp *to* of querystring
        var lastTo;
        if (last.indexOf('to=') > -1) {
            lastTo = last.substring(last.indexOf('to=') + 3);
        }
        // case: last path == next link ::=> continue
        if (myLast === tpage.link['next']) {
            // last equals next link
            if (DEBUG) {
                console.log('last PATH (not ?querystr) equals *next*: GET LAST TPAGE');
            }
            return this.getAsTemporalPage(host + last, axiosInstance);
        }
        else if (last === tpage.link['self']) {
            // this was the last request
            if (DEBUG) {
                console.log('*last* (with ?querystr) equals *self*: STOP');
            }
            return Rx_1.Observable.empty();
        }
        else if (myLast === tpage.link['self']) {
            if (DEBUG) {
                console.log('*last* (without ?querystr) equals *self*: STOP --range in same bucket use case');
            }
            return Rx_1.Observable.empty();
        }
        else if (lastTo === tpage.link['self'].substr(tpage.link['self'].indexOf('from=') + 5)) {
            if (DEBUG) {
                console.log('last *?to=* (from ?querystr) equals *self?from=*: STOP ENDLESS LOOP IN RANGE CASE WITHIN BUCKET');
            }
            return Rx_1.Observable.empty();
        }
        else {
            // last didn't match next yet
            if (DEBUG) {
                console.log('no matches: GET *next* TPAGE');
            }
            return this.getAsTemporalPage(host + tpage.link['next'], axiosInstance);
        }
    };
    return InternalUtils;
}());
exports.InternalUtils = InternalUtils;
function join(delim) {
    var parts = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        parts[_i - 1] = arguments[_i];
    }
    return parts.join(delim);
}
exports.join = join;
function url() {
    var parts = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        parts[_i] = arguments[_i];
    }
    return join.apply(void 0, ['/'].concat(parts));
}
exports.url = url;
//# sourceMappingURL=data:application/json;base64,