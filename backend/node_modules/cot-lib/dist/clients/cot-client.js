"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("rxjs/Observable");
var axios_1 = require("axios");
var sources_client_1 = require("./sources-client");
var locations_client_1 = require("./locations-client");
var layer_client_1 = require("./layer-client");
var CotClient = /** @class */ (function () {
    /**
     * Creates a new CotClient, with optional Basic Auth credentials
     * @param host The host url of the new City of things client. (e.g. http://www.cot-backend.com/api);
     * @param credentials {CotClientCredentials=} Optional credentials object
     */
    function CotClient(host, credentials) {
        this.lastReceivedTime = -1;
        if (host.endsWith('/')) {
            host = host.substr(0, host.length - 1);
        }
        this.host = host;
        if (credentials) {
            var cfg = { auth: credentials };
            this.ax = axios_1.default.create(cfg);
        }
        else {
            this.ax = axios_1.default.create();
        }
    }
    // /**
    //  * Returns all available types as an array of *Type* objects.
    //  * @returns An Observable containg a *Type* array.
    //  */
    // getTypes(): Observable<Type[]> {
    //     let url = this.host + '/types';
    //     return Observable.fromPromise(this.ax.get(url)).pluck('data');
    // }
    // /**
    //  * Returns the metadata of a type as a Type object.
    //  * @param typeId {string} The id of the Type to get the metadata from.
    //  * @returns An Observable containing a *Type* object.
    //  */
    // getType(typeId: string): Observable<Type> {
    //     let url = this.host + '/types/' + typeId;
    //     return Observable.fromPromise(this.ax.get(url)).pluck('data');
    // }
    /**
     * Returns all available sources as an array of Source objects
     * @returns An Observable containing a Source array.
     */
    CotClient.prototype.getSources = function () {
        var url = this.host + '/sources';
        return Observable_1.Observable.fromPromise(this.ax.get(url)).pluck('data');
    };
    /**
     * Returns the metadata of a source as a Source object.
     * @param sourceId {string} The id of the Source to get the metadata from.
     * @param expanded {boolean} Whether to expand the typeRefs or metrics from ids to full Types Metrics (default: false)
     * @returns An Observable containing a *Source* object.
     */
    CotClient.prototype.getSource = function (sourceId, expanded) {
        if (expanded === void 0) { expanded = false; }
        var url = this.host + '/sources/' + sourceId;
        if (expanded) {
            url += '/expanded';
        }
        return Observable_1.Observable.fromPromise(this.ax.get(url)).pluck('data');
    };
    /**
     * Lists all Metric definitions.
     * @returns An Observable cotaining an array of *Metric* objects.
     */
    CotClient.prototype.getMetrics = function () {
        var url = this.host + '/metrics';
        return Observable_1.Observable.fromPromise(this.ax.get(url)).pluck('data');
    };
    /**
     * Returns the definition of a Metric.
     * @param The id of a metric
     * @returns An Observable containing a *Metric* object.
     */
    CotClient.prototype.getMetric = function (metricId) {
        var url = this.host + '/metrics/' + metricId;
        return Observable_1.Observable.fromPromise(this.ax.get(url)).pluck('data');
    };
    /**
     * Returns the ids of the city data layers.
     */
    CotClient.prototype.getCityIds = function () {
        var url = this.host + '/layers/';
        return Observable_1.Observable.fromPromise(this.ax.get(url)).pluck('data');
    };
    /* Client creation methods */
    /**
     * Returns a MultiClient that internally iterates over all given sourceIds when requesting data or stats.
     * @param sourceIds {string[]} The sourceIds to do simultaneous queries on.
     * @returns A new SourcesClient object.
     */
    CotClient.prototype.withSources = function () {
        var sourceIds = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sourceIds[_i] = arguments[_i];
        }
        return new (sources_client_1.SourcesClient.bind.apply(sources_client_1.SourcesClient, [void 0, this.host, this.ax].concat(sourceIds)))();
    };
    /**
     * Returns a MultiClient that internally iterates over all given geohashes when requesting data or stats.
     * @param geohashes {string[]} The geohashes to do simultaneous queries in.
     * @returns A new LocationsClient object.
     */
    CotClient.prototype.withLocations = function () {
        var geohashes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            geohashes[_i] = arguments[_i];
        }
        return new (locations_client_1.LocationsClient.bind.apply(locations_client_1.LocationsClient, [void 0, this.host, this.ax].concat(geohashes)))();
    };
    /**
     * Returns a LayerClient that provides an entry point to layer data per metric for the given cityId
     * @param cityId An id that signifies both the city location and the data granularity
     */
    CotClient.prototype.withCityId = function (cityId) {
        return new layer_client_1.LayerClient(this.host, this.ax, cityId);
    };
    return CotClient;
}());
exports.CotClient = CotClient;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY290LWNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy90ZHVwb250L1dvcmtzcGFjZXMvY290LWxpYi9saWIvIiwic291cmNlcyI6WyJjbGllbnRzL2NvdC1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw4Q0FBNkM7QUFDN0MsK0JBQWdGO0FBRWhGLG1EQUFpRDtBQUNqRCx1REFBcUQ7QUFJckQsK0NBQTZDO0FBRTdDO0lBS0k7Ozs7T0FJRztJQUNILG1CQUFZLElBQVksRUFBRSxXQUFrQztRQVBwRCxxQkFBZ0IsR0FBVyxDQUFDLENBQUMsQ0FBQztRQVFsQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQixJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMzQyxDQUFDO1FBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUNkLElBQUksR0FBRyxHQUFHLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxDQUFDO1lBQ2hDLElBQUksQ0FBQyxFQUFFLEdBQUcsZUFBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoQyxDQUFDO1FBQ0QsSUFBSSxDQUFDLENBQUM7WUFDRixJQUFJLENBQUMsRUFBRSxHQUFHLGVBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM3QixDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU07SUFDTixnRUFBZ0U7SUFDaEUscURBQXFEO0lBQ3JELE1BQU07SUFDTixtQ0FBbUM7SUFDbkMsc0NBQXNDO0lBQ3RDLHFFQUFxRTtJQUNyRSxJQUFJO0lBRUosTUFBTTtJQUNOLHNEQUFzRDtJQUN0RCx5RUFBeUU7SUFDekUsd0RBQXdEO0lBQ3hELE1BQU07SUFD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