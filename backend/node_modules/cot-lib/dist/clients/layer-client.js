"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("rxjs/Observable");
var axios_1 = require("axios");
var util_1 = require("../util");
var internal_utils_1 = require("../internal-utils");
var LayerClient = /** @class */ (function () {
    function LayerClient(host, axiosInstance, cityId) {
        this.host = host;
        this.ax = axiosInstance || axios_1.default.create();
        this.cityId = cityId;
    }
    /**
     * Get layer data of the requested metric.
     * @param metric Metric of the data for the layer
     */
    LayerClient.prototype.getLayer = function (metric) {
        var that = this;
        return {
            getHour: function (hourTS) {
                var hourStr = util_1.Util.Time.getHourStr(hourTS);
                var url = internal_utils_1.url(that.host, 'layers', that.cityId, metric, hourStr);
                return internal_utils_1.InternalUtils.getAsTemporalPage(url, that.ax);
            },
            getHourRange: function (fromTS, toTS) {
                return that.getLayer(metric).getHour(fromTS).expand(function (tpage) {
                    var url = tpage.link.next;
                    if (tpage.link.self.endsWith(util_1.Util.Time.getHourStr(toTS))) {
                        return Observable_1.Observable.empty();
                    }
                    else {
                        return internal_utils_1.InternalUtils.getAsTemporalPage(that.host + url, that.ax);
                    }
                });
            },
            getHourRecap: function (fromTS, toTS) {
                return that.getLayer(metric).getHourRange(fromTS, toTS)
                    .map(function (o) { return o.data; })
                    .reduce(function (acc, curr) { return internal_utils_1.InternalUtils.mergeDataLayerData(acc, curr); });
            },
            getHourRecapOf: function () {
                var hourTS = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    hourTS[_i] = arguments[_i];
                }
                return Observable_1.Observable.from(hourTS)
                    .flatMap(function (ts) { return that.getLayer(metric).getHour(ts); })
                    .filter(function (o) { return !o.data.nodata; })
                    .map(function (o) { return o.data; })
                    .reduce(function (acc, curr) { return internal_utils_1.InternalUtils.mergeDataLayerData(acc, curr); });
            },
            getDay: function (dayTS) {
                var day = util_1.Util.Time.getDayStr(dayTS);
                var url = internal_utils_1.url(that.host, 'layers', that.cityId, metric, day);
                return internal_utils_1.InternalUtils.getAsTemporalPage(url, that.ax);
            },
            getDayRange: function (fromTS, toTS) {
                return that.getLayer(metric).getDay(fromTS).expand(function (tpage) {
                    var url = tpage.link.next;
                    if (tpage.link.self.endsWith(util_1.Util.Time.getDayStr(toTS))) {
                        return Observable_1.Observable.empty();
                    }
                    else {
                        return internal_utils_1.InternalUtils.getAsTemporalPage(that.host + url, that.ax);
                    }
                });
            },
            getDayRecap: function (fromTS, toTS) {
                return that.getLayer(metric).getDayRange(fromTS, toTS)
                    .map(function (o) { return o.data; })
                    .reduce(function (acc, curr) { return internal_utils_1.InternalUtils.mergeDataLayerData(acc, curr); });
            },
            getDayRecapOf: function () {
                var dayTS = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    dayTS[_i] = arguments[_i];
                }
                return Observable_1.Observable.from(dayTS)
                    .flatMap(function (ts) { return that.getLayer(metric).getDay(ts); })
                    .map(function (o) { return o.data; })
                    .reduce(function (acc, curr) { return internal_utils_1.InternalUtils.mergeDataLayerData(acc, curr); });
            },
        };
    };
    return LayerClient;
}());
exports.LayerClient = LayerClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5ZXItY2xpZW50LmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL3RkdXBvbnQvV29ya3NwYWNlcy9jb3QtbGliL2xpYi8iLCJzb3VyY2VzIjpbImNsaWVudHMvbGF5ZXItY2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsOENBQTZDO0FBQzdDLCtCQUEwQjtBQUcxQixnQ0FBK0I7QUFFL0Isb0RBQXlFO0FBRXpFO0lBS0kscUJBQVksSUFBWSxFQUFFLGFBQTRCLEVBQUUsTUFBYztRQUNsRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsRUFBRSxHQUFHLGFBQWEsSUFBSSxlQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDMUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDekIsQ0FBQztJQUVEOzs7T0FHRztJQUNILDhCQUFRLEdBQVIsVUFBUyxNQUFjO1FBQ25CLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQixNQUFNLENBQUM7WUFDSCxPQUFPLEVBQVAsVUFBUSxNQUFjO2dCQUNsQixJQUFNLE9BQU8sR0FBRyxXQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtnQkFDNUMsSUFBTSxHQUFHLEdBQUcsb0JBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDcEUsTUFBTSxDQUFDLDhCQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNsRCxDQUFDO1lBQ0QsWUFBWSxFQUFaLFVBQWEsTUFBYyxFQUFFLElBQVk7Z0JBQ3JDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQSxLQUFLO29C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