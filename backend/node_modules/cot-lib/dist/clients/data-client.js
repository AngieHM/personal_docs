"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("rxjs/Observable");
var axios_1 = require("axios");
var util_1 = require("../util");
var internal_utils_1 = require("../internal-utils");
var URLSearchParams = require('url-search-params');
var DataClient = /** @class */ (function () {
    function DataClient(host, axiosInstance) {
        this.host = host;
        this.ax = axiosInstance || axios_1.default.create();
    }
    DataClient.prototype.generateLatestUrls = function (metric) {
        var _this = this;
        return this.getMultiItems().map(function (item) { return _this.host + _this.getBaseApiPath(item) + '/' + metric + '/events/latest'; });
    };
    DataClient.prototype.generateEventUrls = function (metric, queryStr) {
        var _this = this;
        return this.getMultiItems().map(function (item) { return _this.host + _this.getBaseApiPath(item) + '/' + metric + '/events' + ((queryStr && queryStr.length > 0) ? '?' + queryStr : ''); });
    };
    DataClient.prototype.generateStatsUrls = function (metric, type, timeStr) {
        var _this = this;
        return this.getMultiItems().map(function (item) { return _this.host + _this.getBaseApiPath(item) + '/' + metric + '/stats/' + type + '/' + timeStr; });
    };
    /**
     * Methods for retrieving data of a particual metric
     * @param metric metric name
     */
    DataClient.prototype.getData = function (metric) {
        var that = this;
        return {
            latest: function () {
                return Observable_1.Observable.merge.apply(Observable_1.Observable, that.generateLatestUrls(metric).map(function (url) { return internal_utils_1.InternalUtils.getAsTemporalPage(url, that.ax); }));
            },
            poll: function (period, fromTS) {
                var last;
                var queryStr = new URLSearchParams();
                if (fromTS) {
                    queryStr.append('from', fromTS.toString());
                }
                return Observable_1.Observable.merge.apply(Observable_1.Observable, that.generateEventUrls(metric, queryStr.toString())
                    .map(function (url) { return internal_utils_1.InternalUtils.getAsTemporalPage(url, that.ax)
                    .delay(period)
                    .expand(function (tpage) {
                    if (!!tpage.link.next) {
                        var t = internal_utils_1.InternalUtils.getLastTimestamp(tpage);
                        last = t == null ? last : t;
                        // console.log(last);
                        return internal_utils_1.InternalUtils.getAsTemporalPage(that.host + tpage.link.next, that.ax, last).delay(period);
                    }
                    else {
                        return Observable_1.Observable.empty();
                    }
                }); }));
            },
            range: function (fromTS, toTS) {
                var queryStr = new URLSearchParams();
                queryStr.append('from', fromTS.toString());
                queryStr.append('to', toTS.toString());
                return Observable_1.Observable
                    .merge.apply(Observable_1.Observable, that.generateEventUrls(metric, queryStr.toString()).map(function (url) { return internal_utils_1.InternalUtils.getCompleteInterval(that.host, url, that.ax); })).filter(function (page) { return Object.keys(page.data).length > 0; });
                // .pluck('data');
            }
        };
    };
    ;
    /**
     * Methods for retrieving statistics of a particular metric
     */
    DataClient.prototype.getStats = function (metric) {
        var that = this;
        return {
            getUnit: function () {
                return {
                    getHour: function (hourTS) {
                        return Observable_1.Observable.merge.apply(Observable_1.Observable, that.generateStatsUrls(metric, 'unit', util_1.Util.Time.getHourStr(hourTS)).map(function (url) { return internal_utils_1.InternalUtils.getAsTemporalPage(url, that.ax); }));
                    },
                    getHourRange: function (fromTS, toTS) {
                        return that.getStats(metric).getUnit().getHour(fromTS).expand(function (tpage) {
                            var url = tpage.link.next;
                            if (tpage.link.self.endsWith(util_1.Util.Time.getHourStr(toTS))) {
                                return Observable_1.Observable.empty();
                            }
                            else {
                                return internal_utils_1.InternalUtils.getAsTemporalPage(that.host + url, that.ax);
                            }
                        });
                    },
                    getHourRecap: function (fromTS, toTS) {
                        return that.getStats(metric).getUnit().getHourRange(fromTS, toTS)
                            .filter(function (o) { return !o.data.nodata; })
                            .map(function (o) { return o.data; })
                            .reduce(function (acc, curr) { return internal_utils_1.InternalUtils.mergeStatsData(acc, curr); });
                    },
                    getHourRecapOf: function () {
                        var hourTS = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            hourTS[_i] = arguments[_i];
                        }
                        return Observable_1.Observable.from(hourTS).flatMap(function (ts) { return that.getStats(metric).getUnit().getHour(ts); })
                            .filter(function (o) { return !o.data.nodata; })
                            .map(function (o) { return o.data; })
                            .reduce(function (acc, curr) { return internal_utils_1.InternalUtils.mergeStatsData(acc, curr); });
                    },
                    getDay: function (dayTS) {
                        return Observable_1.Observable.merge.apply(Observable_1.Observable, that.generateStatsUrls(metric, 'unit', util_1.Util.Time.getDayStr(dayTS)).map(function (url) { return internal_utils_1.InternalUtils.getAsTemporalPage(url, that.ax); }));
                    },
                    getDayRange: function (fromTS, toTS) {
                        return that.getStats(metric).getUnit().getDay(fromTS).expand(function (tpage) {
                            var url = tpage.link.next;
                            if (tpage.link.self.endsWith(util_1.Util.Time.getDayStr(toTS))) {
                                return Observable_1.Observable.empty();
                            }
                            else {
                                return internal_utils_1.InternalUtils.getAsTemporalPage(that.host + url, that.ax);
                            }
                        });
                    },
                    getDayRecap: function (fromTS, toTS) {
                        return that.getStats(metric).getUnit().getDayRange(fromTS, toTS)
                            .filter(function (o) { return !o.data.nodata; })
                            .map(function (o) { return o.data; })
                            .reduce(function (acc, curr) { return internal_utils_1.InternalUtils.mergeStatsData(acc, curr); });
                    },
                    getDayRecapOf: function () {
                        var dayTS = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            dayTS[_i] = arguments[_i];
                        }
                        return Observable_1.Observable.from(dayTS).flatMap(function (ts) { return that.getStats(metric).getUnit().getDay(ts); })
                            .filter(function (o) { return !o.data.nodata; })
                            .map(function (o) { return o.data; })
                            .reduce(function (acc, curr) { return internal_utils_1.InternalUtils.mergeStatsData(acc, curr); });
                    },
                };
            },
            getBatch: function () {
                return {
                    getDay: function (dayTS) {
                        return Observable_1.Observable.merge.apply(Observable_1.Observable, that.generateStatsUrls(metric, 'batch', util_1.Util.Time.getDayStr(dayTS))
                            .map(function (url) { return internal_utils_1.InternalUtils.getAsTemporalPage(url, that.ax).filter(function (res) { return Object.keys(res.data).length > 0; }); }));
                    },
                    getDayRange: function (fromTS, toTS) {
                        return that.getStats(metric).getBatch().getDay(fromTS).expand(function (tpage) {
                            var url = tpage.link.next;
                            if (tpage.link.self.endsWith(util_1.Util.Time.getDayStr(toTS))) {
                                return Observable_1.Observable.empty();
                            }
                            else {
                                return internal_utils_1.InternalUtils.getAsTemporalPage(that.host + url, that.ax);
                            }
                        });
                    },
                    getDayRecap: function (fromTS, toTS) {
                        return that.getStats(metric).getBatch().getDayRange(fromTS, toTS)
                            .map(function (o) { return o.data; })
                            .reduce(function (acc, curr) { return internal_utils_1.InternalUtils.mergeStatsBatchedData(acc, curr); });
                    },
                    getDayRecapOf: function () {
                        var dayTS = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            dayTS[_i] = arguments[_i];
                        }
                        return Observable_1.Observable.from(dayTS).flatMap(function (ts) { return that.getStats(metric).getBatch().getDay(ts); })
                            .map(function (o) { return o.data; })
                            .reduce(function (acc, curr) { return internal_utils_1.InternalUtils.mergeStatsBatchedData(acc, curr); });
                    },
                };
            }
        };
    };
    return DataClient;
}());
exports.DataClient = DataClient;
//# sourceMappingURL=data:application/json;base64,