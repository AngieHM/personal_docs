"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = require("axios");
var data_client_1 = require("./data-client");
var SourcesClient = /** @class */ (function (_super) {
    __extends(SourcesClient, _super);
    /**
     * Creates a new SourcesClient, it holds all the sourceIds to fire simeltaneous requests to.
     * @see CotClient#createSourcesClient
     * @param host The host url of the new City of things client. (e.g. http://www.cot-backend.com/api);
     * @param axiosInstance {AxiosInstance} Custom axios instance to perform requests with, if null the defaul axios.create() is used.
     * @param sourceIds The sourceIds to consider
     */
    function SourcesClient(host, axiosInstance) {
        var sourceIds = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            sourceIds[_i - 2] = arguments[_i];
        }
        var _this = _super.call(this, host, axiosInstance || axios_1.default.create()) || this;
        _this.sourceIds = sourceIds;
        return _this;
    }
    SourcesClient.prototype.getMultiItems = function () {
        return this.sourceIds;
    };
    SourcesClient.prototype.getBaseApiPath = function (item) {
        return '/sources/' + item;
    };
    return SourcesClient;
}(data_client_1.DataClient));
exports.SourcesClient = SourcesClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlcy1jbGllbnQuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvdGR1cG9udC9Xb3Jrc3BhY2VzL2NvdC1saWIvbGliLyIsInNvdXJjZXMiOlsiY2xpZW50cy9zb3VyY2VzLWNsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFDQSwrQkFBMEI7QUFJMUIsNkNBQTJDO0FBRTNDO0lBQW1DLGlDQUFVO0lBR3pDOzs7Ozs7T0FNRztJQUNILHVCQUFZLElBQVksRUFBRSxhQUE0QjtRQUFFLG1CQUFzQjthQUF0QixVQUFzQixFQUF0QixxQkFBc0IsRUFBdEIsSUFBc0I7WUFBdEIsa0NBQXNCOztRQUE5RSxZQUNJLGtCQUFNLElBQUksRUFBRSxhQUFhLElBQUksZUFBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLFNBRS9DO1FBREcsS0FBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7O0lBQy9CLENBQUM7SUFFUyxxQ0FBYSxHQUF2QjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFFUyxzQ0FBYyxHQUF4QixVQUF5QixJQUFZO1FBQ2pDLE1BQU0sQ0FBQyxXQUFXLEdBQUMsSUFBSSxDQUFDO0lBQzVCLENBQUM7SUFFTCxvQkFBQztBQUFELENBQUMsQUF2QkQsQ0FBbUMsd0JBQVUsR0F1QjVDO0FBdkJZLHNDQUFhIn0=