"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = require("axios");
var data_client_1 = require("./data-client");
var LocationsClient = /** @class */ (function (_super) {
    __extends(LocationsClient, _super);
    /**
     * Creates a new LocationsClient, it holds all the geohashes to fire simeltaneous requests to.
     * @see CotClient#createLocationsClient
     * @param host The host url of the new City of things client. (e.g. http://www.cot-backend.com/api);
     * @param axiosInstance {AxiosInstance} Custom axios instance to perform requests with, if null the defaul axios.create() is used.
     * @param geohashes The geohashes to consider
     */
    function LocationsClient(host, axiosInstance) {
        var geohashes = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            geohashes[_i - 2] = arguments[_i];
        }
        var _this = _super.call(this, host, axiosInstance || axios_1.default.create()) || this;
        _this.geohashes = geohashes;
        return _this;
    }
    LocationsClient.prototype.getMultiItems = function () {
        return this.geohashes;
    };
    LocationsClient.prototype.getBaseApiPath = function (item) {
        return '/locations/' + item;
    };
    return LocationsClient;
}(data_client_1.DataClient));
exports.LocationsClient = LocationsClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYXRpb25zLWNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy90ZHVwb250L1dvcmtzcGFjZXMvY290LWxpYi9saWIvIiwic291cmNlcyI6WyJjbGllbnRzL2xvY2F0aW9ucy1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQ0EsK0JBQTBCO0FBSTFCLDZDQUEyQztBQUUzQztJQUFxQyxtQ0FBVTtJQUczQzs7Ozs7O09BTUc7SUFDSCx5QkFBWSxJQUFZLEVBQUUsYUFBNEI7UUFBRSxtQkFBc0I7YUFBdEIsVUFBc0IsRUFBdEIscUJBQXNCLEVBQXRCLElBQXNCO1lBQXRCLGtDQUFzQjs7UUFBOUUsWUFDSSxrQkFBTSxJQUFJLEVBQUUsYUFBYSxJQUFJLGVBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxTQUUvQztRQURHLEtBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDOztJQUMvQixDQUFDO0lBRVMsdUNBQWEsR0FBdkI7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDO0lBRVMsd0NBQWMsR0FBeEIsVUFBeUIsSUFBWTtRQUNqQyxNQUFNLENBQUMsYUFBYSxHQUFDLElBQUksQ0FBQztJQUM5QixDQUFDO0lBRUwsc0JBQUM7QUFBRCxDQUFDLEFBdkJELENBQXFDLHdCQUFVLEdBdUI5QztBQXZCWSwwQ0FBZSJ9