"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var cot_client_1 = require("./cot-client");
var internal_utils_1 = require("../internal-utils");
var DebugClient = /** @class */ (function (_super) {
    __extends(DebugClient, _super);
    function DebugClient(host, credentials) {
        return _super.call(this, host, credentials) || this;
    }
    /**
     * Returns only a single TemporalPage for the request.
     * @param sourceId {string} The sourceId of the *Source* to poll from.
     * @param from {number=} The UNIX UTC timestamp from which to do the request. If not present the last data page will be requested.
     */
    DebugClient.prototype.getTemporalPage = function (sourceId, from) {
        var query = '';
        if (from) {
            query += '?from=' + from;
        }
        var url = this.host + '/sources/' + sourceId + '/events' + query;
        return internal_utils_1.InternalUtils.getAsTemporalPage(url, this.ax);
    };
    /**
     * Returns only a single TemporalPage for the request.
     * @param geohash {string} The geohash defining the location.
     * @param typeId {string} The typeId of the *Type* of data to get.
     * @param from {number=} The UNIX UTC timestamp from which to do the request. If not present the last data page will be requested.
     */
    DebugClient.prototype.getTemporalPageIn = function (geohash, typeId, from) {
        var query = '';
        if (from) {
            query += '?from=' + from;
        }
        var url = this.host + '/locations/' + geohash + '/' + typeId + '/events' + query;
        return internal_utils_1.InternalUtils.getAsTemporalPage(url, this.ax);
    };
    /**
     * Tries to parse a request from a complete url to a TemporalPage
     * @param url The complete url (including origin part)
     */
    DebugClient.prototype.getTemporalPageForUrl = function (url) {
        return internal_utils_1.InternalUtils.getAsTemporalPage(url, this.ax);
    };
    /**
     * Attches the given link to the host and returns it as a TemporalPage
     * @param link {string} The link to follow (eg. /source/id1/events?from=123456)
     */
    DebugClient.prototype.getLink = function (link) {
        var url = this.host + link;
        return internal_utils_1.InternalUtils.getAsTemporalPage(url, this.ax);
    };
    return DebugClient;
}(cot_client_1.CotClient));
exports.DebugClient = DebugClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWctY2xpZW50LmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL3RkdXBvbnQvV29ya3NwYWNlcy9jb3QtbGliL2xpYi8iLCJzb3VyY2VzIjpbImNsaWVudHMvZGVidWctY2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUNBLDJDQUErRDtBQUMvRCxvREFBNEQ7QUFHNUQ7SUFBaUMsK0JBQVM7SUFFdEMscUJBQVksSUFBWSxFQUFFLFdBQWtDO2VBQ3hELGtCQUFNLElBQUksRUFBRSxXQUFXLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxxQ0FBZSxHQUFmLFVBQWdCLFFBQWdCLEVBQUUsSUFBYTtRQUMzQyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDZixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ1AsS0FBSyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDN0IsQ0FBQztRQUNELElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsV0FBVyxHQUFHLFFBQVEsR0FBRyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ2pFLE1BQU0sQ0FBQyw4QkFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsdUNBQWlCLEdBQWpCLFVBQWtCLE9BQWUsRUFBRSxNQUFjLEVBQUUsSUFBYTtRQUM1RCxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDZixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ1AsS0FBSyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDN0IsQ0FBQztRQUNELElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsYUFBYSxHQUFHLE9BQU8sR0FBRyxHQUFHLEdBQUcsTUFBTSxHQUFHLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDakYsTUFBTSxDQUFDLDhCQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsMkNBQXFCLEdBQXJCLFVBQXNCLEdBQVc7UUFDN0IsTUFBTSxDQUFDLDhCQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsNkJBQU8sR0FBUCxVQUFRLElBQVk7UUFDaEIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDM0IsTUFBTSxDQUFDLDhCQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBQ0wsa0JBQUM7QUFBRCxDQUFDLEFBbkRELENBQWlDLHNCQUFTLEdBbUR6QztBQW5EWSxrQ0FBVyJ9